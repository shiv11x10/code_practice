---------------------------------------------------------------------------------------------------------------------------------
After solving Reese's first problem Harold thought he had proven himself. But Reese wasn't convinced so he 
gave Harold another query. He told Harold to find the nth term of the sequence given by the equation.
a[n]=( f[n] + g[n] ) % n
where, f[n] = f[n-1] + x(n) ; where x(n) = smallest prime factor of n.
and g[n] = g[n-1] + y(n) ; where y(n) = sum of all natural numbers p less than n which follow that n % p == 0
Given : x(0) = x(1) = y(0) = y(1) = 0
---------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<string.h>
#include<queue>
#include<stdio.h>
using namespace std;
#define unsigned long long int int
bool isPrime(int x)
{
    for(int i=2; i<=sqrt(x); i++)
        if(x%i == 0) return false;
    return true;
}
int y(int x)
{
    if(x<2) return 0;
    int sum = 0;
    for(int i=2; i<sqrt(x); i++)
    {
        if(x%i == 0) {sum += i + x/i;}
    }
    int i = sqrt(x);
    if(i*i == x) sum += i;
    return sum+1;
}
int x(int x1)
{
    if(x1<2) return 0;
    for(int i=2; i<=sqrt(x1); i++)
    {
        if(x1%i == 0 && isPrime(i)) return i;
    }
    return x1;
}
int main()
{
   int T;
   cin>>T;
   int arr[T];
   int n = 0;
       for(int i=0 ;i<T; i++)
       {
           cin>>arr[i];
           if(n<arr[i]) n = arr[i];
       }
           n++;
           int f[n] , g[n];
           f[0] = 0; g[0] = 0;
           for(int i=1; i<n; i++)
           {
               f[i] = f[i-1] + x(i);
               g[i] = g[i-1] + y(i);
           }
       for(int i=0 ;i<T; i++)
       {
           n = arr[i];
           cout<< ((f[n] + g[n])%n)<<endl;
       }
    return 0;
}
