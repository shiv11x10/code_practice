---------------------------------------------------------------------------------------------------------------------------
Bob got a new contract of painting wall. Wall has N bricks. Bob can paint each brick with three type of colors : 
Type A, Type B and Type C. Assume Bob has enough amount of paints of all three types. Find number of ways Bob 
can paint the wall having N bricks with color of Type A, Type B and Type C such that no two adjacent brick should
have same color.

Input:
First line of input contains number of test cases T. Each test case contains a single integer N, number of bricks in wall.

Output:
For each test case print the number of ways Bob can paint the wall. Answer can be too large print answer modulo 109+7.

Constraints:
1 ≤ T ≤ 103
1 ≤ N ≤ 105
-------------------------------------------------------------------------------------------------------------------------------
There are two ways to do it.....
1st--------
#include <bits/stdc++.h>
using namespace std;
int main() {
  int t; cin >> t;
  while(t--){
    int n; cin >> n; long int sum=1;
    for(int i=1;i<=n-1;i++)
      sum=(sum*2)%1000000007;
    sum=(sum*3)%1000000007;
    cout << sum << endl;
    }
}
This will give a complexity of O(n*n)
---------------------------------------------------------------
2md--------
#include<iostream>
using namespace std;
long long int ans[100000],modulo=1000000007,i,T,N;
 int main()
 {
 
     ans[0]=3;
     for(i=1;i<=100000;i++)
        ans[i]=(ans[i-1]*2)%modulo;
     cin>>T;
     while(T--)
     {
         cin>>N;
         cout<<ans[N-1]<<endl;
     }
 
     return 0;
 }
 The complexity will be O(n) as loops are seperate
 WE can do modulo at each step using remainder theorem
